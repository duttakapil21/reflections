Q1. What happens when you initialize a repository? Why do you need to do it?
A. When a repo is initialized using 'git init', git starts tracking that repo and saving snapshots of it for every commit. It is requied if you want to track a file/folder using Git and save multiple version of it for future use.

Q2. How is the staging area different from the working directory and the repository? What value do you think it offers?
A. The staging area is temporary list to which you can add all the files that you'll like to commit. It gives you a lot more control over which files are tracked and taken a snapshot of to be added in a commit. 

Q3. How can you use the staging area to make sure you have one commit per logical change?
A. The staging area gives you more control over what files are commited. Thus making it easier to create one commit per logical change.

Q4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A. When you want to add an experimental feature or create a different version of your main file, you can use create a seperate branch for tracking your files in Git. This allows you to keep the history of your files more organized, as the experimetal features or seperate branches do not interact with the main branch unless mearged.

Q5. How do the diagrams help you visualize the branch structure?
A. The diagrams show how all the branches of a given repo interact with one another. It clarifies the current state and history of the file. 

Q6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A. By merging two branchs, you combine two seperate version of a file. One or both of which contain some unique changes. The commits are ordered according to their time stamps. A new branch is a diversion from it's master branch, it is tracked seperatly from the original branch. When we merge two seperate branches, we combine the changes made in the new branch with the original or another branch. This is why it's representated the way it is in the diagram.

Q7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
A. Git's automatic merging is useful when merging two branches that do not contain changes in the same area. It makes the task easier. But it not useful when there is indeed a conflict in the two branches. That is when manual merging helps. But doing it manually can take a lot of time, and require the devs to dicuss with one another on which change to keep and which one to discard. 

